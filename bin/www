#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('photoalbums');
var app = require('../app');
var globals = require('../lib/globals');
var mysql       = require('mysql');

/**
 * Get port from environment and store in Express.
 */

app.set('port', globals.applicationPort);
var server = app.listen(app.get('port'));

server.on('listening',function() {
    debug('Express server listening on port ' + server.address().port);
    var connection  = mysql.createConnection(globals.database);
    connection.connect(function(err) {
        if(err){
            console.log('error connecting to database:');
        } else {
            console.log('connected to database!');
        }
    });
});


/*
 var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
*/